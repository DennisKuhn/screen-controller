{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/infrastructure/configmanager.ts","webpack:///./src/infrastructure/preload.ts","webpack:///external \"crypto\"","webpack:///external \"electron\""],"names":[],"mappings":"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","file":"preload.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/infrastructure/preload.ts\");\n","import { ipcRenderer } from 'electron';\nimport crypto from 'crypto';\n/**\n * Loads configuration from storage and provides interface to configuration updates through channel.\n * @module\n */\nclass ConfigManager {\n\n    locationHref: string;\n\n    sourceId: string;\n    displayId: string;\n    settingsId: string;\n\n    config;\n    userProperties;\n\n    /**\n     * \n     */\n    constructor() {\n        this.locationHref = window.location.href;\n        this.sourceId = crypto.createHash('md5').update(this.locationHref).digest('hex');\n\n        this.displayId = process.argv.find((arg) => {\n            return /^--displayid=/.test(arg);\n        }).split('=')[1];\n\n        this.settingsId = `${this.displayId}-${this.sourceId}-config`;\n\n        console.log(`${this.constructor.name}(): ${this.settingsId} = ${this.displayId} + ${this.sourceId} (${this.locationHref})`);\n\n        this.loadConfig();\n\n        this.connectToWallpaper();\n    }\n\n    /**\n     * Exposes interface to wallpaper window, e.g. window.wallpaper.register(listeners)\n     */\n    connectToWallpaper(): void {\n        // Expose protected methods that allow the renderer process to use\n        // the ipcRenderer without exposing the entire object\n        window.wallpaper = {\n            register: (listeners) => {\n                console.log(\n                    `${this.constructor.name}: ${this.settingsId}: ${Object.keys(this.userProperties).length}: register`,\n                    listeners,\n                    this.userProperties);\n                if (listeners.user) {\n                    try {\n                        listeners.user(this.userProperties);\n                    } catch (initialError) {\n                        console.error(\n                            `${this.constructor.name}: ${this.settingsId}: ERROR initial user setting:${initialError}:`,\n                            initialError,\n                            this.userProperties);\n                    }\n                    ipcRenderer.on(this.settingsId + '-userSettings', async (e, settingText) => {\n                        try {\n                            const changedSettings = await JSON.parse(settingText);\n                            listeners.user(changedSettings);\n                        } catch (settingsError) {\n                            console.error(\n                                `${this.constructor.name}: ${this.settingsId}: ERROR updating user setting:${settingsError}:${settingText}`,\n                                settingsError,\n                                settingText);\n                        }\n                    });\n                }\n            }\n        };\n    }\n\n    /**\n     *\n     */\n    loadConfig(): void {\n        console.log(`${this.constructor.name}: ${this.settingsId}`);\n        const configString = localStorage.getItem(this.settingsId);\n\n        if (configString) {\n            try {\n                this.config = JSON.parse(configString);\n                this.userProperties = this.config.general.properties;\n\n                console.log(`${this.constructor.name}: ${this.settingsId}: loaded config`, this.userProperties, this.config);\n            } catch (loadConfigError) {\n                console.error(\n                    `${this.constructor.name}: ${this.settingsId}: Error parsing config JSON:${loadConfigError}: ${configString} file: ${this.locationHref}`,\n                    loadConfigError,\n                    configString);\n            }\n        } else {\n            console.warn(`${this.constructor.name}: ${this.settingsId}: no config: ${this.locationHref}`);\n        }\n    }\n}\n\nexport default ConfigManager;\n","import ConfigManager from './configmanager';\n\nlet configManager;\nconsole.log('preload included')\nprocess.once('loaded', () => {\n    configManager = new ConfigManager();\n});\n","module.exports = require(\"crypto\");","module.exports = require(\"electron\");"],"sourceRoot":""}