!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){e.exports=r(1)},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(2));console.log("preload included"),process.once("loaded",(function(){o.default.start()}))},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{c(n.next(e))}catch(e){i(e)}}function u(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,u)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(3),u=i(r(4)),c=r(5),a=i(r(7)),l=function(){function e(e,t){this.baseUrl=t,this.baseId=u.default.createHash("md5").update(this.baseUrl.href).digest("hex"),this.displayId=e,this.configId=this.displayId+"-"+this.baseId+"-config",console.log(this.constructor.name+"(): "+this.configId+" = "+this.displayId+" + "+this.baseId+" ("+this.baseUrl.href+")"),this.loadConfig()}return e.prototype.loadConfig=function(){console.log(this.constructor.name+": "+this.configId);var e=localStorage.getItem(this.configId);if(e)try{this.config=JSON.parse(e),this.userProperties=this.config.general.properties,console.log(this.constructor.name+": "+this.configId+": loaded config",this.userProperties,this.config)}catch(t){console.error(this.constructor.name+": "+this.configId+": Error parsing config JSON:"+t+": "+e+" file: "+this.baseUrl.href,t,e)}else console.warn(this.constructor.name+": "+this.configId+": no config: "+this.baseUrl.href)},e.prototype.loadDefault=function(){return n(this,void 0,Promise,(function(){var e,t,r,n;return o(this,(function(o){switch(o.label){case 0:e=this.baseUrl.href.substring(0,this.baseUrl.href.lastIndexOf("/")+1)+"project.json",t=c.href2fs(e),console.log(this.constructor.name+": "+this.configId+": defaultLocation: "+e+" defaultPath: "+t+" file: "+this.baseUrl.href),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,a.default.promises.readFile(t)];case 2:return r=o.sent(),this.config=JSON.parse(r.toString()),this.userProperties=this.config.general.properties,console.log(this.constructor.name+": "+this.configId+": loaded default",this.userProperties,this.config),[3,4];case 3:return n=o.sent(),console.error(this.constructor.name+": "+this.configId+": ERROR loading default:"+n+":"+e,n,e),[3,4];case 4:if(this.config)try{localStorage.setItem(this.configId,JSON.stringify(this.config)),console.log(this.constructor.name+": "+this.configId+": stored default",this.config)}catch(t){console.error(this.constructor.name+": "+this.configId+": ERROR storing default:"+t+":"+e,t,e)}return[2]}}))}))},e}(),f=function(){function e(){}return e.start=function(){var t=Number(process.argv.find((function(e){return/^--displayid=/.test(e)})).split("=")[1]);e.getConfig(t,c.href2Url(window.location.href)).then((function(){e.connectToWallpaper()}))},e.getConfig=function(t,r){return n(this,void 0,Promise,(function(){var n;return o(this,(function(o){switch(o.label){case 0:return(n=e.settings.find((function(e){return e.displayId==t&&e.baseUrl==r})))?[3,2]:(n=new l(t,r),e.settings.push(n),n.config?[3,2]:[4,n.loadDefault()]);case 1:o.sent(),o.label=2;case 2:return[2,n.config]}}))}))},e.connectToWallpaper=function(){window.wallpaper={register:e.registerPage}},e.CHANNEL="-userSettings",e.settings=[],e.onNewSettings=function(t,r){return n(void 0,void 0,Promise,(function(){var t,n,i;return o(this,(function(o){switch(o.label){case 0:t=e.settings[0],o.label=1;case 1:return o.trys.push([1,3,,4]),[4,JSON.parse(r)];case 2:return n=o.sent(),e.listeners.user(n),[3,4];case 3:return i=o.sent(),console.error("ConfigController: "+t.configId+": ERROR updating user setting:"+i+":"+r,i,r),[3,4];case 4:return[2]}}))}))},e.registerPage=function(t){var r=e.settings[0];if(e.listeners=t,console.log("ConfigController: "+r.configId+": "+Object.keys(r.userProperties).length+": register",t,r.userProperties),e.listeners.user){try{e.listeners.user(r.userProperties)}catch(e){console.error("ConfigController: "+r.configId+": ERROR initial user setting:"+e+":",e,r.userProperties)}s.ipcRenderer.on(r.configId+e.CHANNEL,e.onNewSettings)}},e}();t.default=f},function(e,t){e.exports=require("electron")},function(e,t){e.exports=require("crypto")},function(e,t,r){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(6));t.fs2Url=function(e){return{auth:null,path:null,slashes:null,query:null,hash:(t=o.default.pathToFileURL(e)).hash,host:t.host,hostname:t.hostname,href:t.href,pathname:t.pathname,protocol:t.protocol,search:t.search,port:t.port};var t},t.url2fs=function(e){return o.default.fileURLToPath(e.href)},t.href2Url=function(e){return o.default.parse(e,!1,!1)},t.href2fs=function(e){return t.url2fs(t.href2Url(e))},t.default=o.Url},function(e,t){e.exports=require("url")},function(e,t){e.exports=require("fs")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZnJhc3RydWN0dXJlL3ByZWxvYWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZnJhc3RydWN0dXJlL0NvbmZpZ0NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZWxlY3Ryb25cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjcnlwdG9cIiIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvVXJsLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcInVybFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImZzXCIiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb25zb2xlIiwibG9nIiwicHJvY2VzcyIsIm9uY2UiLCJzdGFydCIsImRpc3BsYXlJZCIsImJhc2VVcmwiLCJ0aGlzIiwiYmFzZUlkIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImhyZWYiLCJkaWdlc3QiLCJjb25maWdJZCIsImNvbnN0cnVjdG9yIiwibG9hZENvbmZpZyIsImNvbmZpZ1N0cmluZyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjb25maWciLCJKU09OIiwicGFyc2UiLCJ1c2VyUHJvcGVydGllcyIsImdlbmVyYWwiLCJwcm9wZXJ0aWVzIiwibG9hZENvbmZpZ0Vycm9yIiwiZXJyb3IiLCJ3YXJuIiwibG9hZERlZmF1bHQiLCJQcm9taXNlIiwiZGVmYXVsdExvY2F0aW9uIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJkZWZhdWx0UGF0aCIsImhyZWYyZnMiLCJwcm9taXNlcyIsInJlYWRGaWxlIiwiYnVmZmVyIiwidG9TdHJpbmciLCJzZXRJdGVtIiwic3RyaW5naWZ5Iiwic3RvcmVFcnJvciIsIk51bWJlciIsImFyZ3YiLCJmaW5kIiwiYXJnIiwidGVzdCIsInNwbGl0IiwiQ29uZmlnQ29udHJvbGxlciIsImdldENvbmZpZyIsImhyZWYyVXJsIiwid2luZG93IiwibG9jYXRpb24iLCJ0aGVuIiwiY29ubmVjdFRvV2FsbHBhcGVyIiwic2V0dGluZyIsInNldHRpbmdzIiwiY2FuZGlkYXRlIiwiQ29uZmlnU2V0dGluZ3MiLCJwdXNoIiwid2FsbHBhcGVyIiwicmVnaXN0ZXIiLCJyZWdpc3RlclBhZ2UiLCJDSEFOTkVMIiwib25OZXdTZXR0aW5ncyIsImUiLCJzZXR0aW5nVGV4dCIsImNoYW5nZWRTZXR0aW5ncyIsImxpc3RlbmVycyIsInVzZXIiLCJrZXlzIiwibGVuZ3RoIiwiaW5pdGlhbEVycm9yIiwiaXBjUmVuZGVyZXIiLCJvbiIsInJlcXVpcmUiLCJmczJVcmwiLCJsaW5rIiwiYXV0aCIsInBhdGgiLCJzbGFzaGVzIiwicXVlcnkiLCJoYXNoIiwiVVJMT2JqZWN0IiwicGF0aFRvRmlsZVVSTCIsImhvc3QiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJwb3J0IiwidXJsMmZzIiwibG9jYWxVcmwiLCJmaWxlVVJMVG9QYXRoIiwiVXJsIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FB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QVEsUSxjQ0F6QjVHLEVBQU9ELFFBQVU2RyxRQUFRIiwiZmlsZSI6InByZWxvYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJpbXBvcnQgQ29uZmlnQ29udHJvbGxlciBmcm9tICcuL0NvbmZpZ0NvbnRyb2xsZXInO1xuXG5jb25zb2xlLmxvZygncHJlbG9hZCBpbmNsdWRlZCcpO1xuXG5wcm9jZXNzLm9uY2UoJ2xvYWRlZCcsICgpID0+IHtcbiAgICBDb25maWdDb250cm9sbGVyLnN0YXJ0KCk7XG59KTtcbiIsImltcG9ydCB7IGlwY1JlbmRlcmVyIH0gZnJvbSAnZWxlY3Ryb24nO1xyXG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XHJcbmltcG9ydCBVcmwsIHsgaHJlZjJVcmwsIGhyZWYyZnMgfSBmcm9tICcuLi91dGlscy9VcmwnO1xyXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgd2FsbHBhcGVyOiB7XHJcbiAgICAgICAgICAgIHJlZ2lzdGVyOiAobGlzdGVuZXJzOiB7IHVzZXI6IChzZXR0aW5nczogQ29uZmlnUHJvcGVydGllcykgPT4gdm9pZCB9KSA9PiB2b2lkO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFwZXJDb25maWcge1xyXG4gICAgY29udGVudHJhdGluZzogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICAgIGZpbGU6IHN0cmluZztcclxuICAgIHByZXZpZXc6IHN0cmluZztcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBzdHJpbmc7XHJcbiAgICB2aXNpYmlsaXR5OiBzdHJpbmc7XHJcbiAgICB0YWdzOiBzdHJpbmdbXTtcclxuICAgIGdlbmVyYWw6IHtcclxuICAgICAgICBzdXBwb3J0c2F1ZGlvcHJvY2Vzc2luZzogYm9vbGVhbjtcclxuICAgICAgICBwcm9wZXJ0aWVzOiBDb25maWdQcm9wZXJ0aWVzO1xyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb25maWdQcm9wZXJ0aWVzIHtcclxuICAgIFtrZXk6IHN0cmluZ106IENvbmZpZ1Byb3BlcnR5O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb25maWdPcHRpb24ge1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnUHJvcGVydHkge1xyXG4gICAgY29uZGl0aW9uOiBzdHJpbmc7XHJcbiAgICBvcmRlcjogbnVtYmVyO1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgbWF4OiBudW1iZXI7XHJcbiAgICBtaW46IG51bWJlcjtcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICBvcHRpb25zOiBDb25maWdPcHRpb25bXTtcclxufVxyXG5cclxuY2xhc3MgQ29uZmlnU2V0dGluZ3Mge1xyXG5cclxuICAgIGJhc2VVcmw6IFVybDtcclxuICAgIHByaXZhdGUgYmFzZUlkOiBzdHJpbmc7XHJcbiAgICBkaXNwbGF5SWQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25maWdJZDogc3RyaW5nO1xyXG5cclxuICAgIGNvbmZpZzogUGFwZXJDb25maWc7XHJcbiAgICB1c2VyUHJvcGVydGllczogQ29uZmlnUHJvcGVydGllcztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkaXNwbGF5SWQ6IG51bWJlciwgYmFzZVVybDogVXJsKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDsgLy8gdXJsLnBhdGhUb0ZpbGVVUkwoZmlsZSk7XHJcblxyXG4gICAgICAgIHRoaXMuYmFzZUlkID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZSh0aGlzLmJhc2VVcmwuaHJlZikuZGlnZXN0KCdoZXgnKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaXNwbGF5SWQgPSBkaXNwbGF5SWQ7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlnSWQgPSBgJHt0aGlzLmRpc3BsYXlJZH0tJHt0aGlzLmJhc2VJZH0tY29uZmlnYDtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSgpOiAke3RoaXMuY29uZmlnSWR9ID0gJHt0aGlzLmRpc3BsYXlJZH0gKyAke3RoaXMuYmFzZUlkfSAoJHt0aGlzLmJhc2VVcmwuaHJlZn0pYCk7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZENvbmZpZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbG9hZENvbmZpZygpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9OiAke3RoaXMuY29uZmlnSWR9YCk7XHJcbiAgICAgICAgY29uc3QgY29uZmlnU3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5jb25maWdJZCk7XHJcblxyXG4gICAgICAgIGlmIChjb25maWdTdHJpbmcpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnID0gSlNPTi5wYXJzZShjb25maWdTdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51c2VyUHJvcGVydGllcyA9IHRoaXMuY29uZmlnLmdlbmVyYWwucHJvcGVydGllcztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9OiAke3RoaXMuY29uZmlnSWR9OiBsb2FkZWQgY29uZmlnYCwgdGhpcy51c2VyUHJvcGVydGllcywgdGhpcy5jb25maWcpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChsb2FkQ29uZmlnRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfTogJHt0aGlzLmNvbmZpZ0lkfTogRXJyb3IgcGFyc2luZyBjb25maWcgSlNPTjoke2xvYWRDb25maWdFcnJvcn06ICR7Y29uZmlnU3RyaW5nfSBmaWxlOiAke3RoaXMuYmFzZVVybC5ocmVmfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZENvbmZpZ0Vycm9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1N0cmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfTogJHt0aGlzLmNvbmZpZ0lkfTogbm8gY29uZmlnOiAke3RoaXMuYmFzZVVybC5ocmVmfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBsb2FkRGVmYXVsdCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBkZWZhdWx0TG9jYXRpb24gPSB0aGlzLmJhc2VVcmwuaHJlZi5zdWJzdHJpbmcoMCwgdGhpcy5iYXNlVXJsLmhyZWYubGFzdEluZGV4T2YoJy8nKSArIDEpICsgJ3Byb2plY3QuanNvbic7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFBhdGggPSBocmVmMmZzKGRlZmF1bHRMb2NhdGlvbik7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX06ICR7dGhpcy5jb25maWdJZH06IGRlZmF1bHRMb2NhdGlvbjogJHtkZWZhdWx0TG9jYXRpb259IGRlZmF1bHRQYXRoOiAke2RlZmF1bHRQYXRofSBmaWxlOiAke3RoaXMuYmFzZVVybC5ocmVmfWApO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGRlZmF1bHRMb2NhdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGRlZmF1bHRQYXRoKTtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcgPSBKU09OLnBhcnNlKGJ1ZmZlci50b1N0cmluZygpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXNlclByb3BlcnRpZXMgPSB0aGlzLmNvbmZpZy5nZW5lcmFsLnByb3BlcnRpZXM7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9OiAke3RoaXMuY29uZmlnSWR9OiBsb2FkZWQgZGVmYXVsdGAsIHRoaXMudXNlclByb3BlcnRpZXMsIHRoaXMuY29uZmlnKTtcclxuICAgICAgICB9IGNhdGNoIChsb2FkRXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgICAgIGAke3RoaXMuY29uc3RydWN0b3IubmFtZX06ICR7dGhpcy5jb25maWdJZH06IEVSUk9SIGxvYWRpbmcgZGVmYXVsdDoke2xvYWRFcnJvcn06JHtkZWZhdWx0TG9jYXRpb259YCxcclxuICAgICAgICAgICAgICAgIGxvYWRFcnJvcixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRMb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5jb25maWdJZCwgSlNPTi5zdHJpbmdpZnkodGhpcy5jb25maWcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9OiAke3RoaXMuY29uZmlnSWR9OiBzdG9yZWQgZGVmYXVsdGAsIHRoaXMuY29uZmlnKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoc3RvcmVFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9OiAke3RoaXMuY29uZmlnSWR9OiBFUlJPUiBzdG9yaW5nIGRlZmF1bHQ6JHtzdG9yZUVycm9yfToke2RlZmF1bHRMb2NhdGlvbn1gLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExvY2F0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIExvYWRzIGNvbmZpZ3VyYXRpb24gZnJvbSBzdG9yYWdlIGFuZCBwcm92aWRlcyBpbnRlcmZhY2UgdG8gY29uZmlndXJhdGlvbiB1cGRhdGVzIHRocm91Z2ggY2hhbm5lbC5cclxuICogQG1vZHVsZVxyXG4gKi9cclxuY2xhc3MgQ29uZmlnQ29udHJvbGxlciB7XHJcbiAgICBzdGF0aWMgQ0hBTk5FTCA9ICctdXNlclNldHRpbmdzJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBieSB3YWxscGFwZXItcHJlbG9hZGVyIHRvIGdldCBpbml0aWFsIGNvbmZpZyBhbmQgdXBkYXRlc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZGlzcGxheUlkID0gTnVtYmVyKFxyXG4gICAgICAgICAgICBwcm9jZXNzLmFyZ3YuZmluZCgoYXJnKSA9PiAvXi0tZGlzcGxheWlkPS8udGVzdChhcmcpICkuc3BsaXQoJz0nKVsxXSk7XHJcbiAgICAgICAgLy8gR2V0IGRpc3BsYXlJZCBmcm9tIGFyZ1YgYW5kIHVybCBmcm9tIHdpbmRvdy5sb2NhdGlvbi5ocmVmXHJcbiAgICAgICAgQ29uZmlnQ29udHJvbGxlci5nZXRDb25maWcoXHJcbiAgICAgICAgICAgIGRpc3BsYXlJZCxcclxuICAgICAgICAgICAgaHJlZjJVcmwod2luZG93LmxvY2F0aW9uLmhyZWYpXHJcbiAgICAgICAgKS50aGVuKFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBDb25maWdDb250cm9sbGVyLmNvbm5lY3RUb1dhbGxwYXBlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2V0Q29uZmlnKGRpc3BsYXlJZDogbnVtYmVyLCBiYXNlVXJsOiBVcmwpOiBQcm9taXNlPFBhcGVyQ29uZmlnPiB7XHJcbiAgICAgICAgbGV0IHNldHRpbmcgPSBDb25maWdDb250cm9sbGVyLnNldHRpbmdzLmZpbmQoY2FuZGlkYXRlID0+IGNhbmRpZGF0ZS5kaXNwbGF5SWQgPT0gZGlzcGxheUlkICYmIGNhbmRpZGF0ZS5iYXNlVXJsID09IGJhc2VVcmwpO1xyXG5cclxuICAgICAgICBpZiAoIXNldHRpbmcpIHtcclxuICAgICAgICAgICAgc2V0dGluZyA9IG5ldyBDb25maWdTZXR0aW5ncyhkaXNwbGF5SWQsIGJhc2VVcmwpO1xyXG4gICAgICAgICAgICBDb25maWdDb250cm9sbGVyLnNldHRpbmdzLnB1c2goc2V0dGluZyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNldHRpbmcuY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzZXR0aW5nLmxvYWREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNldHRpbmcuY29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHNldHRpbmdzOiBDb25maWdTZXR0aW5nc1tdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgbGlzdGVuZXJzOiB7IHVzZXI6IChzZXR0aW5nczogQ29uZmlnUHJvcGVydGllcykgPT4gdm9pZCB9O1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIG9uTmV3U2V0dGluZ3MgPSBhc3luYyAoZSwgc2V0dGluZ1RleHQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmcgPSBDb25maWdDb250cm9sbGVyLnNldHRpbmdzWzBdO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkU2V0dGluZ3MgPSBhd2FpdCBKU09OLnBhcnNlKHNldHRpbmdUZXh0KTtcclxuICAgICAgICAgICAgQ29uZmlnQ29udHJvbGxlci5saXN0ZW5lcnMudXNlcihjaGFuZ2VkU2V0dGluZ3MpO1xyXG4gICAgICAgIH0gY2F0Y2ggKHNldHRpbmdzRXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgICAgIGBDb25maWdDb250cm9sbGVyOiAke3NldHRpbmcuY29uZmlnSWR9OiBFUlJPUiB1cGRhdGluZyB1c2VyIHNldHRpbmc6JHtzZXR0aW5nc0Vycm9yfToke3NldHRpbmdUZXh0fWAsXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nc0Vycm9yLFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ1RleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWdpc3RlclBhZ2UgPSAobGlzdGVuZXJzOiB7IHVzZXI6IChzZXR0aW5nczogQ29uZmlnUHJvcGVydGllcykgPT4gdm9pZCB9KTogdm9pZCA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZyA9IENvbmZpZ0NvbnRyb2xsZXIuc2V0dGluZ3NbMF07XHJcblxyXG4gICAgICAgIENvbmZpZ0NvbnRyb2xsZXIubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgYENvbmZpZ0NvbnRyb2xsZXI6ICR7c2V0dGluZy5jb25maWdJZH06ICR7T2JqZWN0LmtleXMoc2V0dGluZy51c2VyUHJvcGVydGllcykubGVuZ3RofTogcmVnaXN0ZXJgLFxyXG4gICAgICAgICAgICBsaXN0ZW5lcnMsXHJcbiAgICAgICAgICAgIHNldHRpbmcudXNlclByb3BlcnRpZXMpO1xyXG4gICAgICAgIGlmIChDb25maWdDb250cm9sbGVyLmxpc3RlbmVycy51c2VyKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBDb25maWdDb250cm9sbGVyLmxpc3RlbmVycy51c2VyKHNldHRpbmcudXNlclByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChpbml0aWFsRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgYENvbmZpZ0NvbnRyb2xsZXI6ICR7c2V0dGluZy5jb25maWdJZH06IEVSUk9SIGluaXRpYWwgdXNlciBzZXR0aW5nOiR7aW5pdGlhbEVycm9yfTpgLFxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxFcnJvcixcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLnVzZXJQcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpcGNSZW5kZXJlci5vbihzZXR0aW5nLmNvbmZpZ0lkICsgQ29uZmlnQ29udHJvbGxlci5DSEFOTkVMLCBDb25maWdDb250cm9sbGVyLm9uTmV3U2V0dGluZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4cG9zZXMgaW50ZXJmYWNlIHRvIHdhbGxwYXBlciB3aW5kb3csIGUuZy4gd2luZG93LndhbGxwYXBlci5yZWdpc3RlcihsaXN0ZW5lcnMpXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIGNvbm5lY3RUb1dhbGxwYXBlcigpOiB2b2lkIHtcclxuICAgICAgICAvLyBFeHBvc2UgcHJvdGVjdGVkIG1ldGhvZHMgdGhhdCBhbGxvdyB0aGUgcmVuZGVyZXIgcHJvY2VzcyB0byB1c2VcclxuICAgICAgICAvLyB0aGUgaXBjUmVuZGVyZXIgd2l0aG91dCBleHBvc2luZyB0aGUgZW50aXJlIG9iamVjdFxyXG4gICAgICAgIHdpbmRvdy53YWxscGFwZXIgPSB7XHJcbiAgICAgICAgICAgIHJlZ2lzdGVyOiBDb25maWdDb250cm9sbGVyLnJlZ2lzdGVyUGFnZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbmZpZ0NvbnRyb2xsZXI7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImVsZWN0cm9uXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNyeXB0b1wiKTsiLCJpbXBvcnQgdXJsLCB7IFVybCB9IGZyb20gJ3VybCc7XHJcblxyXG5jb25zdCBVUkwyVXJsID0gKFVSTE9iamVjdDogdXJsLlVSTCk6IFVybCA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGF1dGg6IG51bGwsXHJcbiAgICAgICAgcGF0aDogbnVsbCxcclxuICAgICAgICBzbGFzaGVzOiBudWxsLFxyXG4gICAgICAgIHF1ZXJ5OiBudWxsLFxyXG4gICAgICAgIGhhc2g6IFVSTE9iamVjdC5oYXNoLFxyXG4gICAgICAgIGhvc3Q6IFVSTE9iamVjdC5ob3N0LFxyXG4gICAgICAgIGhvc3RuYW1lOiBVUkxPYmplY3QuaG9zdG5hbWUsXHJcbiAgICAgICAgaHJlZjogVVJMT2JqZWN0LmhyZWYsXHJcbiAgICAgICAgcGF0aG5hbWU6IFVSTE9iamVjdC5wYXRobmFtZSxcclxuICAgICAgICBwcm90b2NvbDogVVJMT2JqZWN0LnByb3RvY29sLFxyXG4gICAgICAgIHNlYXJjaDogVVJMT2JqZWN0LnNlYXJjaCxcclxuICAgICAgICBwb3J0OiBVUkxPYmplY3QucG9ydFxyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBmczJVcmwgPSAobGluazogc3RyaW5nKTogVXJsID0+IHtcclxuICAgIHJldHVybiBVUkwyVXJsKHVybC5wYXRoVG9GaWxlVVJMKGxpbmspKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB1cmwyZnMgPSAobG9jYWxVcmw6IFVybCk6IHN0cmluZyA9PiB7XHJcbiAgICByZXR1cm4gdXJsLmZpbGVVUkxUb1BhdGgobG9jYWxVcmwuaHJlZik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaHJlZjJVcmwgPSAoaHJlZjogc3RyaW5nKTogVXJsID0+IHtcclxuICAgIHJldHVybiB1cmwucGFyc2UoaHJlZiwgZmFsc2UsIGZhbHNlKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBocmVmMmZzID0gKGhyZWY6IHN0cmluZyk6IHN0cmluZyA9PiB7XHJcbiAgICByZXR1cm4gdXJsMmZzKGhyZWYyVXJsKGhyZWYpKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVybDsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1cmxcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==