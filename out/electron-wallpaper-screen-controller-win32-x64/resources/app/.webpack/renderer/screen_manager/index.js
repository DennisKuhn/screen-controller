!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=7)}([function(e,t){e.exports=require("electron")},function(e,t,r){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(0));t.CHANNEL="wallpapers",t.FILE_STORAGE_APPENDIX="-file",t.Display2StorageKey=function(e){return e.toString()+t.FILE_STORAGE_APPENDIX};var o=new RegExp("^(?<displayId>[0-9]+)("+t.FILE_STORAGE_APPENDIX+")$");t.StorageKey2Display=function(e){var r=o.exec(e);if(r.groups.displayId)return Number.parseInt(r.groups.displayId);throw new Error("Storage key must start with display id and end with "+t.FILE_STORAGE_APPENDIX+", not: "+e)},t.IsStorageKey=function(e){return o.test(e)},t.default=i.ipcRenderer},function(e,t,r){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(15));t.fs2Url=function(e){return{auth:null,path:null,slashes:null,query:null,hash:(t=i.default.pathToFileURL(e)).hash,host:t.host,hostname:t.hostname,href:t.href,pathname:t.pathname,protocol:t.protocol,search:t.search,port:t.port};var t},t.url2fs=function(e){return i.default.fileURLToPath(e.href)},t.href2Url=function(e){return i.default.parse(e,!1,!1)},t.href2fs=function(e){return t.url2fs(t.href2Url(e))},t.default=i.Url},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=document.createElement(e);return t&&(t.className&&r.classList.add(t.className),t.parent&&t.parent.appendChild(r),t.text&&(r.textContent=t.text),t.html&&(r.innerHTML=t.html)),r}},,,,function(e,t,r){e.exports=r(8)},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),r(9);var i=r(0),o=n(r(14));(new(function(){function e(){this.displays=[],this.views=[],this.screensWrapper=document.querySelector("[id = displayswrapper]"),console.log(""+this.constructor.name)}return e.prototype.start=function(){var e=this;return console.log(this.constructor.name+".start"),this.displays=i.remote.screen.getAllDisplays(),this.displays.forEach((function(t){e.views.push(new o.default(t,e.screensWrapper))})),this},e}())).start()},function(e,t,r){var n=r(10);"string"==typeof n&&(n=[[e.i,n,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};r(12)(n,i);n.locals&&(e.exports=n.locals)},function(e,t,r){(t=r(11)(!1)).push([e.i,"body {\r\n    padding: 10px 20px;\r\n    color: #EEE;\r\n    background-color: #333;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    text-align: center;\r\n  }\r\n\r\n  h1, h2 {\r\n    margin: 0 0 10px;\r\n    font-weight: normal;\r\n  }\r\n\r\n  p {\r\n    font-size: 12px;\r\n  }\r\n\r\n  button {\r\n    background-color: transparent;\r\n    color: #52dac2;\r\n    border: 2px solid #52dac2;\r\n    border-radius: 10px;\r\n    padding: 5px 30px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  button:hover {\r\n    color: #60ffe3;\r\n    border-color: #60ffe3;\r\n  }\r\n\r\n  .button_container {\r\n    padding: 30px 0px;\r\n  }\r\n\r\n  input[type='text'] {\r\n    padding: 5px 10px;\r\n  }\r\n\r\n  input[type='text']:focus {\r\n    outline-color: #52dac2;\r\n    outline-style: solid;\r\n    outline-width: 2px;\r\n  }\r\n\r\n  .display {\r\n    text-align: left;\r\n    margin-bottom: 15px;\r\n    /* width: 75%;\r\n    display: flex;\r\n    flex-direction: column; */\r\n  }\r\n\r\n  .display .title {\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n\r\n    /* width: 100%; */\r\n  }\r\n\r\n  .display .size {\r\n    /* float: left; */\r\n  }\r\n\r\n  .display .button {\r\n    margin-right: 10px;\r\n    /* float: left; */\r\n  }\r\n\r\n  .display .displayfile {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    max-width: calc(100vw  - 200px);\r\n    text-align: right;\r\n    display: inline-block;\r\n    direction: rtl;\r\n  }\r\n\r\n  .configEditor {\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: greenyellow 2px solid;\r\n  }\r\n\r\n  .configEditor .field {\r\n    border: darkblue 2px solid;\r\n    display: flex;\r\n    flex-direction: row;\r\n  }\r\n\r\n  .configEditor .field .title {\r\n    border: whitesmoke 2px solid;\r\n    display: block;\r\n    width: 50%;\r\n  }\r\n\r\n  .configEditor .field .editor {\r\n    border: orange 2px solid;\r\n    display: block;\r\n    width: 50%;\r\n  }\r\n\r\n  ",""]),e.exports=t},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var i=(s=n,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(l," */")),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(o).concat([i]).join("\n")}var s,a,l;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);n&&i[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),t.push(l))}},t}},function(e,t,r){var n,i,o={},s=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=n.apply(this,arguments)),i}),a=function(e,t){return t?t.querySelector(e):document.querySelector(e)},l=function(e){var t={};return function(e,r){if("function"==typeof e)return e();if(void 0===t[e]){var n=a.call(this,e,r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,u=0,f=[],d=r(13);function p(e,t){for(var r=0;r<e.length;r++){var n=e[r],i=o[n.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](n.parts[s]);for(;s<n.parts.length;s++)i.parts.push(b(n.parts[s],t))}else{var a=[];for(s=0;s<n.parts.length;s++)a.push(b(n.parts[s],t));o[n.id]={id:n.id,refs:1,parts:a}}}}function h(e,t){for(var r=[],n={},i=0;i<e.length;i++){var o=e[i],s=t.base?o[0]+t.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};n[s]?n[s].parts.push(a):r.push(n[s]={id:s,parts:[a]})}return r}function g(e,t){var r=l(e.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=f[f.length-1];if("top"===e.insertAt)n?n.nextSibling?r.insertBefore(t,n.nextSibling):r.appendChild(t):r.insertBefore(t,r.firstChild),f.push(t);else if("bottom"===e.insertAt)r.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=l(e.insertAt.before,r);r.insertBefore(t,i)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var n=function(){0;return r.nc}();n&&(e.attrs.nonce=n)}return m(t,e.attrs),g(e,t),t}function m(e,t){Object.keys(t).forEach((function(r){e.setAttribute(r,t[r])}))}function b(e,t){var r,n,i,o;if(t.transform&&e.css){if(!(o="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=o}if(t.singleton){var s=u++;r=c||(c=v(t)),n=_.bind(null,r,s,!1),i=_.bind(null,r,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),g(e,t),t}(t),n=S.bind(null,r,t),i=function(){y(r),r.href&&URL.revokeObjectURL(r.href)}):(r=v(t),n=I.bind(null,r),i=function(){y(r)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var r=h(e,t);return p(r,t),function(e){for(var n=[],i=0;i<r.length;i++){var s=r[i];(a=o[s.id]).refs--,n.push(a)}e&&p(h(e,t),t);for(i=0;i<n.length;i++){var a;if(0===(a=n[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete o[a.id]}}}};var w,x=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function _(e,t,r,n){var i=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=x(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}function I(e,t){var r=t.css,n=t.media;if(n&&e.setAttribute("media",n),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}function S(e,t,r){var n=r.css,i=r.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(n=d(n)),i&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([n],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var r=t.protocol+"//"+t.host,n=r+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?r+o:n+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=r(0),s=r(2),a=n(r(16)),l=n(r(3)),c=i(r(1)),u=function(){function e(e,t){var r=this;this.openFile=function(){r.showDialog().then((function(e){console.log(r.constructor.name+"("+r.display.id+") Dialog: canceled="+e.canceled),e.canceled?console.log(r.constructor.name+"("+r.display.id+") Dialog: canceled="+e.canceled):(console.log(r.constructor.name+"("+r.display.id+") Dialog: file="+e.filePaths[0]),r.setFile(s.fs2Url(e.filePaths[0])))})).catch((function(e){console.error("Error showing Open File Dialog: "+e,e)}))},this.showDialog=function(){return o.remote.dialog.showOpenDialog({properties:["openFile"],defaultPath:r.file?r.file.pathname:o.remote.app.getPath("documents"),filters:[{name:"Web pages",extensions:["html","htm"]},{name:"Images",extensions:["jpg","png","gif"]},{name:"Movies",extensions:["mkv","avi","mp4"]},{name:"All Files",extensions:["*"]}]})},console.log(this.constructor.name+"("+e.id+")"),this.display=e,this.fileStorageKey=c.Display2StorageKey(this.display.id);var n=window.localStorage.getItem(this.fileStorageKey);n&&(this.file=s.href2Url(n)),this.container=l.default("div",{parent:t,className:"display"});var i=l.default("div",{parent:this.container,className:"row"});l.default("h2",{parent:i,className:"title",text:this.display.id.toString()}),l.default("span",{parent:i,className:"size",text:this.display.workAreaSize.width+" * "+this.display.workAreaSize.height+" @ "+this.display.workArea.x+", "+this.display.workArea.y});var u=l.default("div",{parent:this.container,className:"row"});l.default("button",{parent:u,className:"button",text:"Choose file"}).onclick=this.openFile,this.fileDisplay=l.default("span",{parent:u,className:"displayfile",text:this.file?this.file.pathname:""}),this.file&&(this.fileDisplay.title=this.file.pathname,this.configEditor=new a.default(this.container,this.display.id,this.file))}return e.prototype.setFile=function(e){this.file=e,this.fileDisplay.textContent=this.file.pathname,window.localStorage.setItem(this.fileStorageKey,this.file.href),c.default.send(c.CHANNEL,this.display.id,"load",this.file.href),this.configEditor=new a.default(this.container,this.display.id,this.file)},e}();t.default=u},function(e,t){e.exports=require("url")},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(3)),o=n(r(17)),s=function(){function e(e,t,r){var n=this;o.default.getConfig(t,r).then((function(r){n.config=r,n.userProperties=n.config.general.properties,console.log(n.constructor.name+":"+t+": got Config",n.config),n.createEditor(e)})).catch((function(e){console.error(n.constructor.name+": "+n.configKey+": Error loading default config:"+e+" file: "+r,e)}))}return e.prototype.createEditor=function(e){var t=i.default("div",{parent:e,className:"configEditor"});Object.entries(this.userProperties).sort((function(e,t){var r=e[1],n=t[1];return r.order-n.order})).forEach((function(e){var r=e[1],n=i.default("div",{parent:t,className:"field"});switch(i.default("span",{parent:n,className:"title",html:r.text}),r.type){case"textinput":var o=i.default("input",{parent:n,className:"editor"});r.value&&(o.value=r.value);break;default:i.default("span",{parent:n,className:"editor",text:r.value})}}))},e}();t.default=s},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(0),a=o(r(18)),l=r(2),c=o(r(19)),u=function(){function e(e,t){this.baseUrl=t,this.baseId=a.default.createHash("md5").update(this.baseUrl.href).digest("hex"),this.displayId=e,this.configId=this.displayId+"-"+this.baseId+"-config",console.log(this.constructor.name+"(): "+this.configId+" = "+this.displayId+" + "+this.baseId+" ("+this.baseUrl.href+")"),this.loadConfig()}return e.prototype.loadConfig=function(){console.log(this.constructor.name+": "+this.configId);var e=localStorage.getItem(this.configId);if(e)try{this.config=JSON.parse(e),this.userProperties=this.config.general.properties,console.log(this.constructor.name+": "+this.configId+": loaded config",this.userProperties,this.config)}catch(t){console.error(this.constructor.name+": "+this.configId+": Error parsing config JSON:"+t+": "+e+" file: "+this.baseUrl.href,t,e)}else console.warn(this.constructor.name+": "+this.configId+": no config: "+this.baseUrl.href)},e.prototype.loadDefault=function(){return n(this,void 0,Promise,(function(){var e,t,r,n;return i(this,(function(i){switch(i.label){case 0:e=this.baseUrl.href.substring(0,this.baseUrl.href.lastIndexOf("/")+1)+"project.json",t=l.href2fs(e),console.log(this.constructor.name+": "+this.configId+": defaultLocation: "+e+" defaultPath: "+t+" file: "+this.baseUrl.href),i.label=1;case 1:return i.trys.push([1,3,,4]),[4,c.default.promises.readFile(t)];case 2:return r=i.sent(),this.config=JSON.parse(r.toString()),this.userProperties=this.config.general.properties,console.log(this.constructor.name+": "+this.configId+": loaded default",this.userProperties,this.config),[3,4];case 3:return n=i.sent(),console.error(this.constructor.name+": "+this.configId+": ERROR loading default:"+n+":"+e,n,e),[3,4];case 4:if(this.config)try{localStorage.setItem(this.configId,JSON.stringify(this.config)),console.log(this.constructor.name+": "+this.configId+": stored default",this.config)}catch(t){console.error(this.constructor.name+": "+this.configId+": ERROR storing default:"+t+":"+e,t,e)}return[2]}}))}))},e}(),f=function(){function e(){}return e.start=function(){var t=Number(process.argv.find((function(e){return/^--displayid=/.test(e)})).split("=")[1]);e.getConfig(t,l.href2Url(window.location.href)).then((function(){e.connectToWallpaper()}))},e.getConfig=function(t,r){return n(this,void 0,Promise,(function(){var n;return i(this,(function(i){switch(i.label){case 0:return(n=e.settings.find((function(e){return e.displayId==t&&e.baseUrl==r})))?[3,2]:(n=new u(t,r),e.settings.push(n),n.config?[3,2]:[4,n.loadDefault()]);case 1:i.sent(),i.label=2;case 2:return[2,n.config]}}))}))},e.connectToWallpaper=function(){window.wallpaper={register:e.registerPage}},e.CHANNEL="-userSettings",e.settings=[],e.onNewSettings=function(t,r){return n(void 0,void 0,Promise,(function(){var t,n,o;return i(this,(function(i){switch(i.label){case 0:t=e.settings[0],i.label=1;case 1:return i.trys.push([1,3,,4]),[4,JSON.parse(r)];case 2:return n=i.sent(),e.listeners.user(n),[3,4];case 3:return o=i.sent(),console.error("ConfigController: "+t.configId+": ERROR updating user setting:"+o+":"+r,o,r),[3,4];case 4:return[2]}}))}))},e.registerPage=function(t){var r=e.settings[0];if(e.listeners=t,console.log("ConfigController: "+r.configId+": "+Object.keys(r.userProperties).length+": register",t,r.userProperties),e.listeners.user){try{e.listeners.user(r.userProperties)}catch(e){console.error("ConfigController: "+r.configId+": ERROR initial user setting:"+e+":",e,r.userProperties)}s.ipcRenderer.on(r.configId+e.CHANNEL,e.onNewSettings)}},e}();t.default=f},function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("fs")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,